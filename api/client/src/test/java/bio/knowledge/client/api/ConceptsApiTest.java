/*
 * Translator Knowledge Beacon Aggregator API
 * This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself. 
 *
 * OpenAPI spec version: 1.1.1
 * Contact: richard@starinformatics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package bio.knowledge.client.api;

import bio.knowledge.client.ApiException;
import bio.knowledge.client.model.BeaconCliquesQuery;
import bio.knowledge.client.model.BeaconCliquesQueryResult;
import bio.knowledge.client.model.BeaconCliquesQueryStatus;
import bio.knowledge.client.model.BeaconConceptWithDetails;
import bio.knowledge.client.model.BeaconConceptsQuery;
import bio.knowledge.client.model.BeaconConceptsQueryResult;
import bio.knowledge.client.model.BeaconConceptsQueryStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConceptsApi
 */
@Ignore
public class ConceptsApiTest {

    private final ConceptsApi api = new ConceptsApi();

    
    /**
     * 
     *
     * Retrieves a list of concept cliques based on  &#39;data ready&#39; from a previously /cliques posted query parameter submission 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCliquesTest() throws ApiException {
        String queryId = null;
        BeaconCliquesQueryResult response = api.getCliques(queryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the status of a given query about the cliques in the system 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCliquesQueryStatusTest() throws ApiException {
        String queryId = null;
        BeaconCliquesQueryStatus response = api.getCliquesQueryStatus(queryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves details for a specified clique of equivalent concepts in the system,  as specified by a (url-encoded) CURIE identifier of a clique known to the aggregator 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConceptDetailsTest() throws ApiException {
        String cliqueId = null;
        List<Integer> beacons = null;
        BeaconConceptWithDetails response = api.getConceptDetails(cliqueId, beacons);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves a (paged) list of basic equivalent concept clique data from beacons &#39;data ready&#39; from a previously /concepts posted query parameter submission 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConceptsTest() throws ApiException {
        String queryId = null;
        List<Integer> beacons = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        BeaconConceptsQueryResult response = api.getConcepts(queryId, beacons, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the status of a given keyword search query about the concepts in the system 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConceptsQueryStatusTest() throws ApiException {
        String queryId = null;
        List<Integer> beacons = null;
        BeaconConceptsQueryStatus response = api.getConceptsQueryStatus(queryId, beacons);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the beacon aggregator assigned cliques of equivalent concepts that includes the specified (url-encoded) CURIE identifiers. Note that the clique to which a given concept CURIE belongs may change over time as the aggregator progressively discovers the members of the clique. Any unmatched identifiers will be ignored (e.g. the id couldn&#39;t be found in any of the beacons)  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCliquesQueryTest() throws ApiException {
        List<String> ids = null;
        BeaconCliquesQuery response = api.postCliquesQuery(ids);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Posts the query parameters to retrieves a list of  concepts from the system 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConceptsQueryTest() throws ApiException {
        List<String> keywords = null;
        List<String> categories = null;
        List<Integer> beacons = null;
        BeaconConceptsQuery response = api.postConceptsQuery(keywords, categories, beacons);

        // TODO: test validations
    }
    
}
