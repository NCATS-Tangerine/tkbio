/*
 * Translator Knowledge Beacon Aggregator API
 * This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself. 
 *
<<<<<<< HEAD
 * OpenAPI spec version: 1.0.7
=======
 * OpenAPI spec version: 1.0.10
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
 * Contact: richard@starinformatics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package bio.knowledge.client.api;

import bio.knowledge.client.ApiCallback;
import bio.knowledge.client.ApiClient;
import bio.knowledge.client.ApiException;
import bio.knowledge.client.ApiResponse;
import bio.knowledge.client.Configuration;
import bio.knowledge.client.Pair;
import bio.knowledge.client.ProgressRequestBody;
import bio.knowledge.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


<<<<<<< HEAD
import bio.knowledge.client.model.BeaconCliqueIdentifier;
import bio.knowledge.client.model.BeaconConcept;
import bio.knowledge.client.model.BeaconConceptWithDetails;
=======
import bio.knowledge.client.model.ServerCliqueIdentifier;
import bio.knowledge.client.model.ServerConceptWithDetails;
import bio.knowledge.client.model.ServerConceptsQuery;
import bio.knowledge.client.model.ServerConceptsQueryResult;
import bio.knowledge.client.model.ServerConceptsQueryStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConceptsApi {
    private ApiClient apiClient;

    public ConceptsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConceptsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getClique */
    private com.squareup.okhttp.Call getCliqueCall(String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clique/{identifier}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
<<<<<<< HEAD
    private com.squareup.okhttp.Call getCliqueValidateBeforeCall(String identifier, String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
=======
    private com.squareup.okhttp.Call getCliqueValidateBeforeCall(String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getClique(Async)");
        }
        
        
<<<<<<< HEAD
        com.squareup.okhttp.Call call = getCliqueCall(identifier, sessionId, progressListener, progressRequestListener);
=======
        com.squareup.okhttp.Call call = getCliqueCall(identifier, progressListener, progressRequestListener);
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieves the beacon aggregator assigned clique of equivalent concepts that includes the specified (url-encoded) CURIE identifier. Note that the clique to which a given concept CURIE belongs may change over time as the aggregator progressively discovers the members of the clique. 
     * @param identifier a [CURIE-encoded](https://www.w3.org/TR/curie/) identifier of interest to be resolved to a concept clique (required)
     * @return ServerCliqueIdentifier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServerCliqueIdentifier getClique(String identifier) throws ApiException {
        ApiResponse<ServerCliqueIdentifier> resp = getCliqueWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * 
     * Retrieves the beacon aggregator assigned clique of equivalent concepts that includes the specified (url-encoded) CURIE identifier. Note that the clique to which a given concept CURIE belongs may change over time as the aggregator progressively discovers the members of the clique. 
     * @param identifier a [CURIE-encoded](https://www.w3.org/TR/curie/) identifier of interest to be resolved to a concept clique (required)
     * @return ApiResponse&lt;ServerCliqueIdentifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServerCliqueIdentifier> getCliqueWithHttpInfo(String identifier) throws ApiException {
        com.squareup.okhttp.Call call = getCliqueValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<ServerCliqueIdentifier>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the beacon aggregator assigned clique of equivalent concepts that includes the specified (url-encoded) CURIE identifier. Note that the clique to which a given concept CURIE belongs may change over time as the aggregator progressively discovers the members of the clique. 
     * @param identifier a [CURIE-encoded](https://www.w3.org/TR/curie/) identifier of interest to be resolved to a concept clique (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCliqueAsync(String identifier, final ApiCallback<ServerCliqueIdentifier> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCliqueValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServerCliqueIdentifier>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getConceptDetails */
    private com.squareup.okhttp.Call getConceptDetailsCall(String cliqueId, List<Integer> beacons, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/concepts/details/{cliqueId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "cliqueId" + "\\}", apiClient.escapeString(cliqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (beacons != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "beacons", beacons));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
<<<<<<< HEAD
    private com.squareup.okhttp.Call getConceptDetailsValidateBeforeCall(String cliqueId, List<String> beacons, String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
=======
    private com.squareup.okhttp.Call getConceptDetailsValidateBeforeCall(String cliqueId, List<Integer> beacons, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        
        // verify the required parameter 'cliqueId' is set
        if (cliqueId == null) {
            throw new ApiException("Missing the required parameter 'cliqueId' when calling getConceptDetails(Async)");
        }
        
        
<<<<<<< HEAD
        com.squareup.okhttp.Call call = getConceptDetailsCall(cliqueId, beacons, sessionId, progressListener, progressRequestListener);
=======
        com.squareup.okhttp.Call call = getConceptDetailsCall(cliqueId, beacons, progressListener, progressRequestListener);
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieves details for a specified clique of equivalent concepts in the system,  as specified by a (url-encoded) CURIE identifier of a clique known to the aggregator 
     * @param cliqueId a [CURIE-encoded](https://www.w3.org/TR/curie/) identifier, as returned  by any other endpoint of the beacon aggregator API, of an exactly matching  concept clique of interest. (required)
     * @param beacons set of aggregator indices of beacons to be used as knowledge sources for the query  (optional)
<<<<<<< HEAD
     * @param sessionId client-defined session identifier  (optional)
     * @return BeaconConceptWithDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BeaconConceptWithDetails getConceptDetails(String cliqueId, List<String> beacons, String sessionId) throws ApiException {
        ApiResponse<BeaconConceptWithDetails> resp = getConceptDetailsWithHttpInfo(cliqueId, beacons, sessionId);
=======
     * @return ServerConceptWithDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServerConceptWithDetails getConceptDetails(String cliqueId, List<Integer> beacons) throws ApiException {
        ApiResponse<ServerConceptWithDetails> resp = getConceptDetailsWithHttpInfo(cliqueId, beacons);
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        return resp.getData();
    }

    /**
     * 
     * Retrieves details for a specified clique of equivalent concepts in the system,  as specified by a (url-encoded) CURIE identifier of a clique known to the aggregator 
     * @param cliqueId a [CURIE-encoded](https://www.w3.org/TR/curie/) identifier, as returned  by any other endpoint of the beacon aggregator API, of an exactly matching  concept clique of interest. (required)
     * @param beacons set of aggregator indices of beacons to be used as knowledge sources for the query  (optional)
<<<<<<< HEAD
     * @param sessionId client-defined session identifier  (optional)
     * @return ApiResponse&lt;BeaconConceptWithDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BeaconConceptWithDetails> getConceptDetailsWithHttpInfo(String cliqueId, List<String> beacons, String sessionId) throws ApiException {
        com.squareup.okhttp.Call call = getConceptDetailsValidateBeforeCall(cliqueId, beacons, sessionId, null, null);
        Type localVarReturnType = new TypeToken<BeaconConceptWithDetails>(){}.getType();
=======
     * @return ApiResponse&lt;ServerConceptWithDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServerConceptWithDetails> getConceptDetailsWithHttpInfo(String cliqueId, List<Integer> beacons) throws ApiException {
        com.squareup.okhttp.Call call = getConceptDetailsValidateBeforeCall(cliqueId, beacons, null, null);
        Type localVarReturnType = new TypeToken<ServerConceptWithDetails>(){}.getType();
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves details for a specified clique of equivalent concepts in the system,  as specified by a (url-encoded) CURIE identifier of a clique known to the aggregator 
     * @param cliqueId a [CURIE-encoded](https://www.w3.org/TR/curie/) identifier, as returned  by any other endpoint of the beacon aggregator API, of an exactly matching  concept clique of interest. (required)
     * @param beacons set of aggregator indices of beacons to be used as knowledge sources for the query  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
<<<<<<< HEAD
    public com.squareup.okhttp.Call getConceptDetailsAsync(String cliqueId, List<String> beacons, String sessionId, final ApiCallback<BeaconConceptWithDetails> callback) throws ApiException {
=======
    public com.squareup.okhttp.Call getConceptDetailsAsync(String cliqueId, List<Integer> beacons, final ApiCallback<ServerConceptWithDetails> callback) throws ApiException {
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

<<<<<<< HEAD
        com.squareup.okhttp.Call call = getConceptDetailsValidateBeforeCall(cliqueId, beacons, sessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BeaconConceptWithDetails>(){}.getType();
=======
        com.squareup.okhttp.Call call = getConceptDetailsValidateBeforeCall(cliqueId, beacons, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServerConceptWithDetails>(){}.getType();
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getConcepts */
<<<<<<< HEAD
    private com.squareup.okhttp.Call getConceptsCall(String keywords, String types, Integer pageNumber, Integer pageSize, List<String> beacons, String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
=======
    private com.squareup.okhttp.Call getConceptsCall(String queryId, List<Integer> beacons, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/concepts/data/{queryId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "queryId" + "\\}", apiClient.escapeString(queryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
<<<<<<< HEAD
        if (keywords != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "keywords", keywords));
        if (types != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "types", types));
=======
        if (beacons != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "beacons", beacons));
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConceptsValidateBeforeCall(String queryId, List<Integer> beacons, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling getConcepts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getConceptsCall(queryId, beacons, pageNumber, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieves a (paged) simple list of concepts from beacons with status &#39;data ready&#39; from a previously /concepts posted query parameter submission 
     * @param queryId the query identifier of a concepts query previously posted by the /concepts endpoint (required)
     * @param beacons set of aggregator indices of beacons whose data are to be retrieved  (optional)
     * @param pageNumber (1-based) number of the page to be returned in a paged set of query results  (optional)
     * @param pageSize number of concepts per page to be returned in a paged set of query results  (optional)
     * @return ServerConceptsQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServerConceptsQueryResult getConcepts(String queryId, List<Integer> beacons, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<ServerConceptsQueryResult> resp = getConceptsWithHttpInfo(queryId, beacons, pageNumber, pageSize);
        return resp.getData();
    }

    /**
     * 
     * Retrieves a (paged) simple list of concepts from beacons with status &#39;data ready&#39; from a previously /concepts posted query parameter submission 
     * @param queryId the query identifier of a concepts query previously posted by the /concepts endpoint (required)
     * @param beacons set of aggregator indices of beacons whose data are to be retrieved  (optional)
     * @param pageNumber (1-based) number of the page to be returned in a paged set of query results  (optional)
     * @param pageSize number of concepts per page to be returned in a paged set of query results  (optional)
     * @return ApiResponse&lt;ServerConceptsQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServerConceptsQueryResult> getConceptsWithHttpInfo(String queryId, List<Integer> beacons, Integer pageNumber, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getConceptsValidateBeforeCall(queryId, beacons, pageNumber, pageSize, null, null);
        Type localVarReturnType = new TypeToken<ServerConceptsQueryResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a (paged) simple list of concepts from beacons with status &#39;data ready&#39; from a previously /concepts posted query parameter submission 
     * @param queryId the query identifier of a concepts query previously posted by the /concepts endpoint (required)
     * @param beacons set of aggregator indices of beacons whose data are to be retrieved  (optional)
     * @param pageNumber (1-based) number of the page to be returned in a paged set of query results  (optional)
     * @param pageSize number of concepts per page to be returned in a paged set of query results  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConceptsAsync(String queryId, List<Integer> beacons, Integer pageNumber, Integer pageSize, final ApiCallback<ServerConceptsQueryResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConceptsValidateBeforeCall(queryId, beacons, pageNumber, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServerConceptsQueryResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getConceptsQueryStatus */
    private com.squareup.okhttp.Call getConceptsQueryStatusCall(String queryId, List<Integer> beacons, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/concepts/status/{queryId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "queryId" + "\\}", apiClient.escapeString(queryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (beacons != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "beacons", beacons));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
<<<<<<< HEAD
    private com.squareup.okhttp.Call getConceptsValidateBeforeCall(String keywords, String types, Integer pageNumber, Integer pageSize, List<String> beacons, String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
=======
    private com.squareup.okhttp.Call getConceptsQueryStatusValidateBeforeCall(String queryId, List<Integer> beacons, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling getConceptsQueryStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getConceptsQueryStatusCall(queryId, beacons, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieves the status of a given query about the concepts in the system 
     * @param queryId an active query identifier as returned by a POST of concept query parameters. (required)
     * @param beacons subset of aggregator indices of beacons whose status is being polled (if omitted, then the status of all beacons from the query are returned)  (optional)
     * @return ServerConceptsQueryStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServerConceptsQueryStatus getConceptsQueryStatus(String queryId, List<Integer> beacons) throws ApiException {
        ApiResponse<ServerConceptsQueryStatus> resp = getConceptsQueryStatusWithHttpInfo(queryId, beacons);
        return resp.getData();
    }

    /**
     * 
     * Retrieves the status of a given query about the concepts in the system 
     * @param queryId an active query identifier as returned by a POST of concept query parameters. (required)
     * @param beacons subset of aggregator indices of beacons whose status is being polled (if omitted, then the status of all beacons from the query are returned)  (optional)
     * @return ApiResponse&lt;ServerConceptsQueryStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServerConceptsQueryStatus> getConceptsQueryStatusWithHttpInfo(String queryId, List<Integer> beacons) throws ApiException {
        com.squareup.okhttp.Call call = getConceptsQueryStatusValidateBeforeCall(queryId, beacons, null, null);
        Type localVarReturnType = new TypeToken<ServerConceptsQueryStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the status of a given query about the concepts in the system 
     * @param queryId an active query identifier as returned by a POST of concept query parameters. (required)
     * @param beacons subset of aggregator indices of beacons whose status is being polled (if omitted, then the status of all beacons from the query are returned)  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConceptsQueryStatusAsync(String queryId, List<Integer> beacons, final ApiCallback<ServerConceptsQueryStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConceptsQueryStatusValidateBeforeCall(queryId, beacons, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServerConceptsQueryStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postConceptsQuery */
    private com.squareup.okhttp.Call postConceptsQueryCall(String keywords, List<String> types, List<Integer> beacons, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/concepts".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (keywords != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "keywords", keywords));
        if (types != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "types", types));
        if (beacons != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "beacons", beacons));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postConceptsQueryValidateBeforeCall(String keywords, List<String> types, List<Integer> beacons, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        
        // verify the required parameter 'keywords' is set
        if (keywords == null) {
            throw new ApiException("Missing the required parameter 'keywords' when calling postConceptsQuery(Async)");
        }
        
        
<<<<<<< HEAD
        com.squareup.okhttp.Call call = getConceptsCall(keywords, types, pageNumber, pageSize, beacons, sessionId, progressListener, progressRequestListener);
=======
        com.squareup.okhttp.Call call = postConceptsQueryCall(keywords, types, beacons, progressListener, progressRequestListener);
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        return call;

        
        
        
        
    }

    /**
     * 
     * Posts the query parameters to retrieves a (paged) list of  concepts from the system 
     * @param keywords a (urlencoded) space delimited set of keywords or substrings against which to match concept names and synonyms, e.g. diabetes. (required)
<<<<<<< HEAD
     * @param types a (url-encoded) space-delimited set of semantic groups (specified as codes CHEM, GENE, ANAT, etc.) to which to constrain concepts matched by the main keyword search (see [semantic groups](https://metamap.nlm.nih.gov/Docs/SemGroups_2013.txt) for the full list of codes)  (optional)
     * @param pageNumber (1-based) number of the page to be returned in a paged set of query results  (optional)
     * @param pageSize number of concepts per page to be returned in a paged set of query results  (optional)
     * @param beacons set of aggregator indices of beacons to be used as knowledge sources for the query  (optional)
     * @param sessionId client-defined session identifier  (optional)
     * @return List&lt;BeaconConcept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeaconConcept> getConcepts(String keywords, String types, Integer pageNumber, Integer pageSize, List<String> beacons, String sessionId) throws ApiException {
        ApiResponse<List<BeaconConcept>> resp = getConceptsWithHttpInfo(keywords, types, pageNumber, pageSize, beacons, sessionId);
=======
     * @param types a subset array of concept types (specified as codes gene, pathway, etc.) to which to constrain concepts matched by the main keyword search (see [Biolink Model](https://biolink.github.io/biolink-model) for the full list of codes)  (optional)
     * @param beacons subset of aggregator indices of beacons to be used as knowledge sources for the query (if omitted, then the all beacons are queried)  (optional)
     * @return ServerConceptsQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServerConceptsQuery postConceptsQuery(String keywords, List<String> types, List<Integer> beacons) throws ApiException {
        ApiResponse<ServerConceptsQuery> resp = postConceptsQueryWithHttpInfo(keywords, types, beacons);
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        return resp.getData();
    }

    /**
     * 
     * Posts the query parameters to retrieves a (paged) list of  concepts from the system 
     * @param keywords a (urlencoded) space delimited set of keywords or substrings against which to match concept names and synonyms, e.g. diabetes. (required)
<<<<<<< HEAD
     * @param types a (url-encoded) space-delimited set of semantic groups (specified as codes CHEM, GENE, ANAT, etc.) to which to constrain concepts matched by the main keyword search (see [semantic groups](https://metamap.nlm.nih.gov/Docs/SemGroups_2013.txt) for the full list of codes)  (optional)
     * @param pageNumber (1-based) number of the page to be returned in a paged set of query results  (optional)
     * @param pageSize number of concepts per page to be returned in a paged set of query results  (optional)
     * @param beacons set of aggregator indices of beacons to be used as knowledge sources for the query  (optional)
     * @param sessionId client-defined session identifier  (optional)
     * @return ApiResponse&lt;List&lt;BeaconConcept&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeaconConcept>> getConceptsWithHttpInfo(String keywords, String types, Integer pageNumber, Integer pageSize, List<String> beacons, String sessionId) throws ApiException {
        com.squareup.okhttp.Call call = getConceptsValidateBeforeCall(keywords, types, pageNumber, pageSize, beacons, sessionId, null, null);
        Type localVarReturnType = new TypeToken<List<BeaconConcept>>(){}.getType();
=======
     * @param types a subset array of concept types (specified as codes gene, pathway, etc.) to which to constrain concepts matched by the main keyword search (see [Biolink Model](https://biolink.github.io/biolink-model) for the full list of codes)  (optional)
     * @param beacons subset of aggregator indices of beacons to be used as knowledge sources for the query (if omitted, then the all beacons are queried)  (optional)
     * @return ApiResponse&lt;ServerConceptsQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServerConceptsQuery> postConceptsQueryWithHttpInfo(String keywords, List<String> types, List<Integer> beacons) throws ApiException {
        com.squareup.okhttp.Call call = postConceptsQueryValidateBeforeCall(keywords, types, beacons, null, null);
        Type localVarReturnType = new TypeToken<ServerConceptsQuery>(){}.getType();
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Posts the query parameters to retrieves a (paged) list of  concepts from the system 
     * @param keywords a (urlencoded) space delimited set of keywords or substrings against which to match concept names and synonyms, e.g. diabetes. (required)
<<<<<<< HEAD
     * @param types a (url-encoded) space-delimited set of semantic groups (specified as codes CHEM, GENE, ANAT, etc.) to which to constrain concepts matched by the main keyword search (see [semantic groups](https://metamap.nlm.nih.gov/Docs/SemGroups_2013.txt) for the full list of codes)  (optional)
     * @param pageNumber (1-based) number of the page to be returned in a paged set of query results  (optional)
     * @param pageSize number of concepts per page to be returned in a paged set of query results  (optional)
     * @param beacons set of aggregator indices of beacons to be used as knowledge sources for the query  (optional)
     * @param sessionId client-defined session identifier  (optional)
=======
     * @param types a subset array of concept types (specified as codes gene, pathway, etc.) to which to constrain concepts matched by the main keyword search (see [Biolink Model](https://biolink.github.io/biolink-model) for the full list of codes)  (optional)
     * @param beacons subset of aggregator indices of beacons to be used as knowledge sources for the query (if omitted, then the all beacons are queried)  (optional)
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
<<<<<<< HEAD
    public com.squareup.okhttp.Call getConceptsAsync(String keywords, String types, Integer pageNumber, Integer pageSize, List<String> beacons, String sessionId, final ApiCallback<List<BeaconConcept>> callback) throws ApiException {
=======
    public com.squareup.okhttp.Call postConceptsQueryAsync(String keywords, List<String> types, List<Integer> beacons, final ApiCallback<ServerConceptsQuery> callback) throws ApiException {
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

<<<<<<< HEAD
        com.squareup.okhttp.Call call = getConceptsValidateBeforeCall(keywords, types, pageNumber, pageSize, beacons, sessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeaconConcept>>(){}.getType();
=======
        com.squareup.okhttp.Call call = postConceptsQueryValidateBeforeCall(keywords, types, beacons, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServerConceptsQuery>(){}.getType();
>>>>>>> b6eef7329db817d4f4fb123167501cff4ffdf751
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
