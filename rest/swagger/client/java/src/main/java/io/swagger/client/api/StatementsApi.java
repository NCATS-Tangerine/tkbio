/*
 * Translator Knowledge.Bio API
 * Documentation of the Translator Knowledge.Bio (TKBio) knowledge sources query web service application programming interfaces. Learn more about [TKBio](https://github.com/STARInformatics/tkbio) 
 *
 * OpenAPI spec version: 4.0.1
 * Contact: richard@starinformatics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Identifiers;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse201;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatementsApi {
    private ApiClient apiClient;

    public StatementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatementsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getStatements */
    private com.squareup.okhttp.Call getStatementsCall(String queryId, Integer pageNumber, Integer pageSize, String textFilter, String semanticType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/statements".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (queryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "queryId", queryId));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (textFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "textFilter", textFilter));
        if (semanticType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "semanticType", semanticType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatementsValidateBeforeCall(String queryId, Integer pageNumber, Integer pageSize, String textFilter, String semanticType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling getStatements(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStatementsCall(queryId, pageNumber, pageSize, textFilter, semanticType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieves a paged list of concept-relations with either the subject or object concept matching the list of concepts previously POST&#39;ed into the specified query session 
     * @param queryId identifier of the query session established by prior POST&#39;ing of a list of concept identifiers of interest  (required)
     * @param pageNumber (1-based) number of the page to be returned in a paged set of query results  (optional)
     * @param pageSize number of concepts per page to be returned in a paged set of query results  (optional)
     * @param textFilter text filter to apply against the subject, predicate or object names of the set of concept-relations matched by the main concept search  (optional)
     * @param semanticType semanticType filter to apply against the subject, predicate or object names of the set of concept-relations matched by the main concept search main search string  (optional)
     * @return List&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2003> getStatements(String queryId, Integer pageNumber, Integer pageSize, String textFilter, String semanticType) throws ApiException {
        ApiResponse<List<InlineResponse2003>> resp = getStatementsWithHttpInfo(queryId, pageNumber, pageSize, textFilter, semanticType);
        return resp.getData();
    }

    /**
     * 
     * Retrieves a paged list of concept-relations with either the subject or object concept matching the list of concepts previously POST&#39;ed into the specified query session 
     * @param queryId identifier of the query session established by prior POST&#39;ing of a list of concept identifiers of interest  (required)
     * @param pageNumber (1-based) number of the page to be returned in a paged set of query results  (optional)
     * @param pageSize number of concepts per page to be returned in a paged set of query results  (optional)
     * @param textFilter text filter to apply against the subject, predicate or object names of the set of concept-relations matched by the main concept search  (optional)
     * @param semanticType semanticType filter to apply against the subject, predicate or object names of the set of concept-relations matched by the main concept search main search string  (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse2003&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2003>> getStatementsWithHttpInfo(String queryId, Integer pageNumber, Integer pageSize, String textFilter, String semanticType) throws ApiException {
        com.squareup.okhttp.Call call = getStatementsValidateBeforeCall(queryId, pageNumber, pageSize, textFilter, semanticType, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2003>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a paged list of concept-relations with either the subject or object concept matching the list of concepts previously POST&#39;ed into the specified query session 
     * @param queryId identifier of the query session established by prior POST&#39;ing of a list of concept identifiers of interest  (required)
     * @param pageNumber (1-based) number of the page to be returned in a paged set of query results  (optional)
     * @param pageSize number of concepts per page to be returned in a paged set of query results  (optional)
     * @param textFilter text filter to apply against the subject, predicate or object names of the set of concept-relations matched by the main concept search  (optional)
     * @param semanticType semanticType filter to apply against the subject, predicate or object names of the set of concept-relations matched by the main concept search main search string  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatementsAsync(String queryId, Integer pageNumber, Integer pageSize, String textFilter, String semanticType, final ApiCallback<List<InlineResponse2003>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatementsValidateBeforeCall(queryId, pageNumber, pageSize, textFilter, semanticType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2003>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postStatementQuery */
    private com.squareup.okhttp.Call postStatementQueryCall(List<Identifiers> identifiers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = identifiers;
        
        // create path and map variables
        String localVarPath = "/statements".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postStatementQueryValidateBeforeCall(List<Identifiers> identifiers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'identifiers' is set
        if (identifiers == null) {
            throw new ApiException("Missing the required parameter 'identifiers' when calling postStatementQuery(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postStatementQueryCall(identifiers, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Posts a list of concept identifiers to a given KS endpoint, initiating a query session for concept-relation statement retrieval 
     * @param identifiers list of concept identifiers to be used in a search for associated concept-relation statements  (required)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse201 postStatementQuery(List<Identifiers> identifiers) throws ApiException {
        ApiResponse<InlineResponse201> resp = postStatementQueryWithHttpInfo(identifiers);
        return resp.getData();
    }

    /**
     * 
     * Posts a list of concept identifiers to a given KS endpoint, initiating a query session for concept-relation statement retrieval 
     * @param identifiers list of concept identifiers to be used in a search for associated concept-relation statements  (required)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse201> postStatementQueryWithHttpInfo(List<Identifiers> identifiers) throws ApiException {
        com.squareup.okhttp.Call call = postStatementQueryValidateBeforeCall(identifiers, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Posts a list of concept identifiers to a given KS endpoint, initiating a query session for concept-relation statement retrieval 
     * @param identifiers list of concept identifiers to be used in a search for associated concept-relation statements  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postStatementQueryAsync(List<Identifiers> identifiers, final ApiCallback<InlineResponse201> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postStatementQueryValidateBeforeCall(identifiers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
